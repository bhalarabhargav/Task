<div style="text-align:center; margin-top:60px">
  <%= form_with(model: demo1, data: { turbo: false }) do |form| %>
    <% if demo1.errors.any? %>
      <div style="color: red">
        <h2><%= pluralize(demo1.errors.count, "error") %> prohibited this demo1 from being saved:</h2>
        <ul>
          <% demo1.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div>
      <h2><%= form.label :name, style: "display: block" %></h2>
      <%= form.text_field :name, style: "width: 300px; height: 30px;" %>
    </div>
    <br>

    <div>
      <h2><%= form.label :description, style: "display: block" %></h2>
      <%= form.text_area :description, style: "width: 300px; height: 100px;" %>
    </div>
    <br>

     <div>
      <h2><%= form.label :country, "Country", style: "display: block" %></h2>
      <%= form.select :country, demo1.countries.invert, { include_blank: true }, { id: "country-select" } %>
    </div><br>

    <div>
      <h2><%= form.label :state, "State", style: "display: block" %></h2>
      <%= form.select :state, demo1.states.invert, { include_blank: true }, { id: "state-select" } %>
    </div>
    <br>
    <div>
      <h2><%= form.label :city, "City", style: "display: block" %></h2>
      <%= form.select :city, demo1.cities, { include_blank: true }, { id: "city-select" } %>
    </div>
    <br>
   
    <div>
      <h2><%= form.label :file, "Upload File", style: "display: block" %></h2>
      <%= form.file_field :file, id: "file-upload" %>
    </div>

    <div id="file-preview"></div> <!-- Placeholder for file preview -->

    <div>
      <h2><%= form.label :status, style: "display: block" %></h2>
      <h3><%= form.radio_button :status, "complete" %> Complete</h3>
      <h3><%= form.radio_button :status, "incomplete", checked: true %> Incomplete</h3>
    </div>
    <br>

    <button class="large-button" style="margin: 0 auto; display: block;" type="submit">Submit</button>
  <% end %>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
  // Get the dropdown elements
  const countrySelect = document.getElementById("country-select");
  const stateSelect = document.getElementById("state-select");

  if (!countrySelect || !stateSelect) {
    console.error("Country or State select element not found.");
    return;
  }

  // Add change event listener to the country dropdown
  countrySelect.addEventListener("change", async function () {
    const selectedCountry = countrySelect.value; // Get selected country value
    console.log("Selected country:", selectedCountry);

    // Clear the state dropdown
    stateSelect.innerHTML = '<option value="">Select a State</option>';

    if (selectedCountry) {
      try {
        // Fetch states from the backend for the selected country
        const response = await fetch(`/states?country=${selectedCountry}`);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const data = await response.json(); // Parse JSON response
        console.log("Fetched states data:", data);

        // Populate the state dropdown with new options
        if (data.states && Array.isArray(data.states)) {
          data.states.forEach((state) => {
            const option = document.createElement("option");
            option.value = state.key; // Use short-form key
            option.textContent = state.name; // Display full name
            stateSelect.appendChild(option);
          });
        } else {
          const noStatesOption = document.createElement("option");
          noStatesOption.textContent = "No states available";
          noStatesOption.value = "";
          stateSelect.appendChild(noStatesOption);
        }
      } catch (error) {
        console.error("Error fetching states:", error);
      }
    }
  });

  // Add change event listener to the state dropdown
  stateSelect.addEventListener("change", async function () {
    const selectedState = stateSelect.value; // Get selected state value
    
    const selectedCountry = countrySelect.value; // Get selected country value

    console.log("Selected state:", selectedState);
    console.log("Selected country:", selectedCountry);

    const citySelect = document.getElementById("city-select");
    if (!citySelect) {
      console.error("City select element not found.");
      return;
    }

    // Clear the city dropdown
    citySelect.innerHTML = '<option value="">Select a City</option>';

    if (selectedState && selectedCountry) {
      try {
      
        // Fetch cities from the backend for the selected state and country
        const response = await fetch(`/cities?state=${selectedState}&country=${selectedCountry}`);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const data = await response.json(); // Parse JSON response
        console.log("Fetched cities data:", data);

        // Populate the city dropdown with new options
        if (data.cities && Array.isArray(data.cities)) {
          data.cities.forEach((city) => {
            const option = document.createElement("option");
            option.value = city.key; // Use the key for the value
            option.textContent = city.name; // Use the name for display
            citySelect.appendChild(option);
          });
        } else {
          const noCitiesOption = document.createElement("option");
          noCitiesOption.textContent = "No cities available";
          noCitiesOption.value = "";
          citySelect.appendChild(noCitiesOption);
        }
      } catch (error) {
        console.error("Error fetching cities:", error);
      }
    }
  });
});

</script>
