<div style="text-align:center; margin-top:60px">
  <%= form_with(model: demo1, data: { turbo: false }) do |form| %>
    <% if demo1.errors.any? %>
      <div style="color: red">
        <h2><%= pluralize(demo1.errors.count, "error") %> prohibited this demo1 from being saved:</h2>
        <ul>
          <% demo1.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div>
      <h2><%= form.label :name, style: "display: block" %></h2>
      <%= form.text_field :name, style: "width: 300px; height: 30px;" %>
    </div>
    <br>

    <div>
      <h2><%= form.label :description, style: "display: block" %></h2>
      <%= form.text_area :description, style: "width: 300px; height: 100px;" %>
    </div>
    <br>

     <div>
      <h2><%= form.label :country, "Country", style: "display: block" %></h2>
      <%= form.select :country, demo1.countries.invert, { include_blank: true }, { id: "country-select" } %>
    </div><br>

<%if new == true %>
    <div>
      <h2><%= form.label :state, "State", style: "display: block" %></h2>
      <%= form.select :state, demo1.states, { include_blank: true }, { id: "state-select" } %>
    </div>
    <br>
<% elsif new == false %>
<div>
      <h2><%= form.label :state, "State", style: "display: block" %></h2>
      <%= form.select :state, demo1&.states != [] ? demo1&.states.invert : [], { include_blank: true }, { id: "state-select" } %>
    </div>
    <br>
<% else %>
<div>
      <h2><%= form.label :state, "State", style: "display: block" %></h2>
      <%= form.select :state, demo1.states, { include_blank: true }, { id: "state-select" } %>
    </div>
    <br>
<% end %> 
    <div>
      <h2><%= form.label :city, "City", style: "display: block" %></h2>
      <%= form.select :city, demo1.cities, { include_blank: true }, { id: "city-select" } %>
    </div>
    <br>

   
    <div>
      <h2><%= form.label :file, "Upload File", style: "display: block" %></h2>
      <%= form.file_field :files, multiple: true, id: 'file-upload' %>
    </div>
<% if new == false %>       
           <!-- Existing File Previews -->
                        <h3>Existing Files:</h3>
              <div id="existing-file-container">
                <% if demo1.files.attached? %>
                  <% demo1.files.each do |file| %>
                    <div class="existing-file">
                      <% case file.content_type %>
                      <% when /^image\// %>
                        <%= image_tag url_for(file), style: "max-width: 100px; margin-right: 10px;" %>
                      <% when "application/pdf" %>
                        <%= link_to "View PDF", url_for(file), target: "_blank" %>
                      <% else %>
                        <%= link_to file.filename, url_for(file), target: "_blank" %>
                      <% end %>

                      <!-- Delete file link -->
                      <%= link_to "Delete File", delete_file_demo1_path(demo1, file_id: file.id), method: :delete, data: { confirm: "Are you sure you want to delete this file?" } %>

                    </div>
                  <% end %>
                <% else %>
                  <p>No files uploaded.</p>
                <% end %>
              </div>


<% end %>

    <!-- Preview container -->
    <div id="file-preview-container"></div>

    <div>
      <h2><%= form.label :status, style: "display: block" %></h2>
      <h3><%= form.radio_button :status, "complete" %> Complete</h3>
      <h3><%= form.radio_button :status, "incomplete", checked: true %> Incomplete</h3>
    </div>
    <br>

    <button class="large-button" style="margin: 0 auto; display: block;" type="submit">Submit</button>
  <% end %>
</div>

<script>

// file preview code 
document.addEventListener("DOMContentLoaded", function () {
  const fileInput = document.getElementById("file-upload");
  const previewContainer = document.getElementById("file-preview-container");

  // Handle file input change (when files are selected)
  fileInput.addEventListener("change", function () {
    previewContainer.innerHTML = ""; // Clear existing previews

    const files = fileInput.files;

    // Iterate over selected files and display previews
    Array.from(files).forEach(file => {
      const fileType = file.type;
      const fileReader = new FileReader();
      
      const fileWrapper = document.createElement('div');
      fileWrapper.style.marginBottom = "10px";

      // Handle image files
      if (fileType.startsWith('image/')) {
        fileReader.onload = function (e) {
          const img = document.createElement("img");
          img.src = e.target.result;
          img.style.maxWidth = "100px"; // Set a max width for image preview
          img.style.marginRight = "10px";
          
          fileWrapper.appendChild(img);
          previewContainer.appendChild(fileWrapper);
        };
        fileReader.readAsDataURL(file);
      } 
      // Handle PDF files
      else if (fileType === 'application/pdf') {
        const icon = document.createElement("img");
        icon.src = "pdf-icon.png"; // Use a PDF icon image
        icon.style.maxWidth = "50px";
        fileWrapper.appendChild(icon);
        const name = document.createElement("span");
        name.textContent = file.name;
        fileWrapper.appendChild(name);
        previewContainer.appendChild(fileWrapper);
      }
      // Handle other file types (like text, word, etc.)
      else {
        const icon = document.createElement("img");
        icon.src = "file-icon.png"; // Use a generic file icon
        icon.style.maxWidth = "50px";
        fileWrapper.appendChild(icon);
        const name = document.createElement("span");
        name.textContent = file.name;
        fileWrapper.appendChild(name);
        previewContainer.appendChild(fileWrapper);
      }
    });
  });
});


document.addEventListener("DOMContentLoaded", function () {
  const countrySelect = $("#country-select");
  const stateSelect = $("#state-select");
  const citySelect = $("#city-select");

  console.log("Dropdown elements initialized:", countrySelect, stateSelect, citySelect);

countrySelect.select2({
  placeholder: "Select a Country",
  allowClear: true,
  width: '20%',
  ajax: {
    url: '/countries', // Backend endpoint for fetching countries
    dataType: 'json',
    delay: 250, // Wait 250ms before sending request
    data: function (params) {
      return {
        search: params.term || '', // Pass the search term to the backend
        page: params.page || 1,   // Current page number
        limit: 10                 // Number of countries per page
      };
    },
    processResults: function (data) {
      return {
        results: data.countries.map(country => ({
          id: country.key, // Use `key` from the backend
          text: country.name // Display the country's name
        })),
        pagination: {
          more: data.page * 10 < data.total // Check if more results are available
        }
      };
    },
    cache: true
  }
});



  // Initialize select2 for better dropdown functionality
stateSelect.select2({
  placeholder: "Select a State",
  allowClear: true,
  width: '20%',
  ajax: {
    url: '/states', // Backend endpoint for fetching states
    dataType: 'json',
    delay: 250, // Wait 250ms before sending request
    data: function (params) {
      return {
        country: countrySelect.val(), // Pass selected country
        search: params.term || '',    // Pass search term
        page: params.page || 1,       // Current page number
        limit: 10                     // Number of states per page
      };
    },
    processResults: function (data) {
      return {
        results: data.states.map(state => ({
          id: state.key, // Use `key` from the backend
          text: state.name // Display the state's name
        })),
        pagination: {
          more: data.page * 10 < data.total // Check if more results are available
        }
      };
    },
    cache: true
  }
});


citySelect.select2({
  placeholder: "Select a City",
  allowClear: true,
  width: '20%',
  ajax: {
    url: '/cities', // Backend endpoint for fetching cities
    dataType: 'json',
    delay: 250, // Wait 250ms before sending request
    data: function (params) {
      return {
        country: countrySelect.val(), // Pass selected country
        state: stateSelect.val(),     // Pass selected state
        search: params.term || '',    // Pass search term
        page: params.page || 1,       // Current page number
        limit: 10                     // Number of cities per page
      };
    },
    processResults: function (data) {
      return {
        results: data.cities.map(city => ({
          id: city.key, // Use `key` from the backend
          text: city.name // Display the city's name
        })),
        pagination: {
          more: data.page * 10 < data.total // Check if more results are available
        }
      };
    },
    cache: true
  }
});


  // Reset state and city dropdowns when the country changes
  countrySelect.on("change", function () {
    stateSelect.val(null).trigger('change');
    citySelect.val(null).trigger('change');
  });

  // Reset city dropdown when the state changes
  stateSelect.on("change", function () {
    citySelect.val(null).trigger('change');
  });
});




</script>