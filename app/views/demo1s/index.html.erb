<%= render 'demo1s/header' %>
<h1 style="text-align:center; margin-top:100px">Task</h1>

<div class="table-responsive">
  <%= form_with url: demo1s_path, method: :get, remote: true, id: 'search-form' do |f| %>
    <table class="table table-dark table-bordered text-center">
      <thead>
         <tr>
          <th><%= f.text_field :search_name, placeholder: "Search Name", class: 'search-input' %></th>
          <th><%= f.text_field :search_description, placeholder: "Search Description", class: 'search-input' %></th>
          <th><%= f.text_field :search_status, placeholder: "Search Status", class: 'search-input' %></th>
          <th><%= f.text_field :search_country, placeholder: "Search Country", class: 'search-input' %></th>
          <th><%= f.text_field :search_state, placeholder: "Search State", class: 'search-input' %></th>
          <th><%= f.text_field :search_city, placeholder: "Search City", class: 'search-input' %></th>
          <th><%= f.text_field :search_file, placeholder: "Search File", class: 'search-input' %></th>
         </tr>
         <tr>  
                  <th>
                    <%= link_to '#', id: 'sort-name', class: 'sort-header', data: { column: 'name', direction: 'asc' } do %>
                      Name <span class="sort-arrow" id="arrow-name">▲</span>
                    <% end %>
                  </th>
                  <th>
                    <%= link_to '#', id: 'sort-description', class: 'sort-header', data: { column: 'description', direction: 'asc' } do %>
                      Description <span class="sort-arrow" id="arrow-description">▲</span>
                    <% end %>
                  </th>
                  <th>
                    <%= link_to '#', id: 'sort-status', class: 'sort-header', data: { column: 'status', direction: 'asc' } do %>
                      Status <span class="sort-arrow" id="arrow-status">▲</span>
                    <% end %>
                  </th>
                  <th>
                    <%= link_to '#', id: 'sort-country', class: 'sort-header', data: { column: 'country', direction: 'asc' } do %>
                      Country <span class="sort-arrow" id="arrow-country">▲</span>
                    <% end %>
                  </th>
                  <th>
                    <%= link_to '#', id: 'sort-state', class: 'sort-header', data: { column: 'state', direction: 'asc' } do %>
                      State <span class="sort-arrow" id="arrow-state">▲</span>
                    <% end %>
                  </th>
                  <th>
                    <%= link_to '#', id: 'sort-city', class: 'sort-header', data: { column: 'city', direction: 'asc' } do %>
                      City <span class="sort-arrow" id="arrow-city">▲</span>
                    <% end %>
                  </th>
                  <th>
                    <%= link_to '#', id: 'sort-file', class: 'sort-header', data: { column: 'file', direction: 'asc' } do %>
                      File <span class="sort-arrow" id="arrow-file">▲</span>
                    <% end %>
                  </th>
                  <th><strong>Action:</strong></th>
                </tr>
              </thead>
         </tr>
      </thead>
      <tbody id="table-body">
        <%= render 'demo1s/table_rows', demo1s: @demo1s %>
      </tbody>
    </table>
  <% end %>
</div>

<div class="d-flex justify-content-center">
  <%= paginate @demo1s, remote: true, data: { turbo: false } %>
</div>

<%= link_to "Reset_Filter", demo1s_path, class: "btn btn-primary" %>


<script>

$(document).ready(function() {
  let typingTimer; // Timer identifier
  const typingDelay = 1000; // Delay in milliseconds

  // Trigger form submission on keyup event with a delay
  $(".search-input").on("keyup", function() {
    clearTimeout(typingTimer); // Clear the timer if user types within delay
    typingTimer = setTimeout(function() {
      $("#search-form").submit(); // Trigger form submit to perform AJAX search
    }, typingDelay);
  });

  // Handle pagination via AJAX
  $(".pagination").on("click", "a", function(event) {
    event.preventDefault();
    const url = $(this).attr('href');
    $.get(url, function(data) {
      $("#table-body").html($(data).find("#table-body").html());
      $(".pagination").html($(data).find(".pagination").html());
    });
  });

  // Sorting functionality with form data
  $(document).on('click', '.sort-header', function (event) {
    event.preventDefault();

    const column = $(this).data('column');
    const currentDirection = $(this).data('direction') || 'asc';
    const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';

    // Update arrows visually
    $('.sort-arrow').text('▲'); // Reset all arrows
    $(`#arrow-${column}`).text(newDirection === 'asc' ? '▲' : '▼'); // Update the arrow for the clicked column

    // Update the data-direction attribute for future toggles
    $(this).data('direction', newDirection);

    // Serialize form data, including search filters
    const formData = $('#search-form').serialize();

    // Send AJAX request for sorting with search filters
    $.get({
      url: '/demo1s',
      data: formData + `&column=${column}&direction=${newDirection}`,
      success: function (data) {
        // Update table body and pagination
        $('#table-body').html($(data).find('#table-body').html());
        $('.pagination').html($(data).find('.pagination').html());
      },
      error: function () {
        alert('An error occurred while sorting.');
      }
    });

       $.get({
      url: '/demo1s',
      data: formData + `&column=${column}&direction=${newDirection}`,
      success: function (data) {
        // Update table body and pagination
        $('#table-body').html($(data).find('#table-body').html());
        $('.pagination').html($(data).find('.pagination').html());
      },
      error: function () {
        alert('An error occurred while sorting.');
      }
    });
    
  });
});

</script>
